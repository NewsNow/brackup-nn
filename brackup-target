#!/usr/bin/perl

# LICENCE INFORMATION
#
# This file is part of brackup-nn, a backup tool based on Brackup.
#
# Brackup is authored by Brad Fitzpatrick <brad@danga.com> (and others)
# and is copyright (c) Six Apart, Ltd, with portions copyright (c) Gavin Carr
# <gavin@openfusion.com.au> (see code for details).  Brackup is licensed for
# use, modification and/or distribution under the same terms as Perl itself.
#
# This file was forked from Brackup on 18 March 2013 and changed on and since
# this date by NewsNow Publishing Limited to effect bug fixes, reliability
# stability and/or performance improvements, and/or feature enhancements;
# and such changes are copyright (c) 2013 NewsNow Publishing Limited.  You may
# use, modify, and/or redistribute brackup-nn under the same terms as Perl itself.
#

=head1 NAME

brackup-target - Manage your backup targets

=head1 SYNOPSIS

 $ brackup-target [opts] <target_name> list_backups
 $ brackup-target [opts] <target_name> get_backup <backup_file>
 $ brackup-target [opts] <target_name> get_backups
 $ brackup-target [opts] <target_name> delete_backup <backup_file>
 $ brackup-target [opts] <target_name> prune   # remove old backups
 $ brackup-target [opts] <target_name> fsck    # check the consistency of the backups and do garbage collection

By default, I<brackup-target> does not execute write or delete operations.
Use the --execute|-x option to perform all operations instead of doing a dry-run.

=head2 OPTIONS

=over 4

=item --execute|-x

Do execute write and delete operations.

=item --dry-run|-n

For backwards compatibility, this option is retained.
This is now the default behaviour, which can be overridden by --execute.

=item --dest=DIR

Destination to write files to.  Defaults to current working directory.

=item --verbose|-v

Be verbose with status.
Can be specified multiple times to increase the level of verbosity.

=item --keep-backups

To be used in combination with the I<prune> command. This overrides the
I<keep_backups> option specified in the configuration file.

=item --source <source>

To be used in combination with the I<prune> command. This restricts the
prune operation to only delete backup files from the given I<source>.

=item --interactive

To be used in combination with the I<fsck> command. Runs interactively,
requiring an explicit confirmation before deleting chunks that have been
garbage collected. Implies --verbose.

=item --meta-dir=DIR

If specified, allows I<fsck> to use local metafiles, if available.
The list of metafiles is still loaded from the target.
Useful if the metafiles on the target are encrypted, as if all metafiles
are available locally, then these tasks can run without having to enter
a passphrase for GPG for decryption.

If specified, I<prune> and I<delete_backup> deletes the local metafile as well.

=item --no-gpg

Use together with --meta-dir. If specified, brackup-target will abort
instead of attempting to decrypt a metafile loaded from the target.

=item --skip-gc

To be used in combination with the I<fsck> command.
Skip garbage collection altogether.

=item --force-gc

To be used in combination with the I<fsck> command.
Force garbage collection even if inconsistencies were found between the metafiles
and chunks on the target.

=item --ignore-no-metafiles

To be used in combination with the I<fsck> command.
Continue even if no metafiles were found.

=back

=head1 WARRANTY

Brackup is distributed as-is and comes without warranty of any kind,
expressed or implied.  We aren't responsible for your data loss.

=head1 SEE ALSO

brackup-restore

=head1 AUTHOR

Brad Fitzpatrick E<lt>brad@danga.comE<gt>

Copyright (c) 2006-2007 Six Apart, Ltd. All rights reserved.

This module is free software. You may use, modify, and/or redistribute this
software under the terms of same terms as perl itself.

=cut

use strict;
use warnings;
use Getopt::Long;

use Cwd;
use FindBin qw($Bin);
use lib "$Bin/lib";

use Brackup;

my $config_file;
my $destdir;
my $meta_dir;
my $opt_help;
my $opt_verbose;
my $opt_keep_backups;
my $opt_execute;
my $opt_dryrun;
my $opt_interactive;
my $opt_source;
my $opt_nogpg;
my $opt_skipgc;
my $opt_forcegc;
my $opt_ignore_no_meta;
usage() unless
    GetOptions(
               'verbose+'       => \$opt_verbose,
               'dest=s'         => \$destdir,
               'config=s'       => \$config_file,
               'keep-backups=i' => \$opt_keep_backups,
               'dry-run|n'      => \$opt_dryrun,
               'execute|x'      => \$opt_execute,
               'interactive'    => \$opt_interactive,
               'source=s'       => \$opt_source,
               'help'           => \$opt_help,
               'meta-dir=s'     => \$meta_dir,
               'no-gpg'         => \$opt_nogpg,
               'skip-gc'        => \$opt_skipgc,
               'force-gc'       => \$opt_forcegc,
               'ignore-no-metafiles' => \$opt_ignore_no_meta
               );

if($opt_execute){
    if($opt_dryrun){
        die "--dry-run and --execute cannot be specified at the same time!";
    }
}else{
    $opt_dryrun = 1;
}

if ($destdir) {
    chdir $destdir or die "Failed to chdir to $destdir: $!\n";
}

if ($opt_help) {
    eval "use Pod::Usage;";
    Pod::Usage::pod2usage( -verbose => 1, -exitval => 0 );
    exit 0;
}
$opt_verbose ||= 1 if $opt_interactive;

my $config = eval { Brackup::Config->load($config_file) } or
    usage($@);

my $target_name = shift or usage();
my $cmd_name    = shift or usage();
$cmd_name =~ s/-/_/g;      # accept hyphenated versions of commands

my $target = eval { $config->load_target($target_name); } or
    usage($@);

my $code = __PACKAGE__->can("CMD_$cmd_name") or
    usage("Unknown/unimplemented command.");

# Return code: 0 if method returns true; otherwise 1
exit($code->() ? 0 : 1);

sub CMD_list_backups {
     my $sub = shift;

    printf("%-24s %9s %s\n",
        'Backup Date',
        'Size (B)',
        'Backup File'
    );
    printf("%-24s %9s %s\n",
        '-' x 11,
        '-' x 8,
        '-' x 11
    );
    foreach my $si (sort { $b->time <=> $a->time } $target->backups) {
        printf("%24s %9s %s",
            $si->localtime,
            $si->size || '?',
            $si->filename
        );
         &$sub($si) if $sub;
         print "\n";
    }
    return 1;
}

sub CMD_get_backup {
    my $name = shift @ARGV or
        die "get_backup requires a filename to download";
    $target->get_backup($name)
        or die "Failed to retrieve backup $name\n";

    warn "Retrieved metafile '$name' successfully.\n";
}

sub CMD_get_backups {
    &CMD_list_backups(sub {
                                     my $si = shift;
                                     my $size = $si->size;
                                     my $name = $si->filename;
                                     no warnings 'uninitialized';
                                     if (-s "$name.brackup" == $size || -s "$name.brackup.orig" == $size || -s "$name" == $size) {
                                         print " ... OK";
                                         return;
                                     }
                                     print " ... ";
                                     $target->get_backup($si->filename);
                                     print "OK";
                                 });
}

sub CMD_delete_backup {
    my $name = shift @ARGV or
        die "delete_backup requires a filename to download";

    die "NOT deleting '$name' in dry-run mode. Use -x to delete.\n" if $opt_dryrun;

    $target->delete_backup_and_local_metafile($name, $meta_dir)
        or die "Failed to delete backup $name\n";

    warn "Deleted backup metafile $name successfully\n";
}

sub CMD_prune {
    my $removed_count = $target->prune( keep_backups => $opt_keep_backups,
                                        meta_dir => $meta_dir,
                                        dryrun => $opt_dryrun,
                                        source => $opt_source,
                                        verbose => $opt_verbose);
    debug("$removed_count backups " . ($opt_dryrun ? "would be " : "") . "removed from target");
}

sub CMD_fsck {
    warn "Running fsck...\n";
    return $target->fsck({
        meta_dir => $meta_dir,
        no_gpg => $opt_nogpg,
        verbose => $opt_verbose,
        dryrun => $opt_dryrun,
        interactive => $opt_interactive,
        skip_gc => $opt_skipgc,
        force_gc => $opt_forcegc,
        ignore_no_meta => $opt_ignore_no_meta
    });
}

sub debug {
    my $msg = shift;
    return unless $opt_verbose;
    warn "$msg\n";
}

sub usage {
    my $why = shift || "";
    if ($why) {
        $why =~ s/\s+$//;
        $why = "Error: $why\n\n";
    }
    die "${why}brackup-target <target> <cmd> [...]\nbrackup-target --help\n";
}
